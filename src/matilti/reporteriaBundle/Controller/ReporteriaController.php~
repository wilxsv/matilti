<?php

namespace matilti\reporteriaBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;

class ReporteriaController extends Controller
{
 public function indexAction(){
	return $this->render('reporteriaBundle::default.html.twig'); 
 }

 public function reportesAction(){
	return $this->render('reporteriaBundle:Reporteria:resultado.html.twig');
 }

 public function lastReportesAction() {

	//========Reporte General=================
	$general = $this->generarGeneral();
	
	//========Reporte Encuesta=================
	$encuestas = $this->generarEncuestas();

	//=======Reporte Historial operaciones===========
	$historial = $this->generarHistorial();
	
	//=======Denuncias===========
	$users = $this->getDoctrine()->getRepository('modeloBundle:ScdUsuario')->masActivo();
	$tituloUser = array ('Enviado' => 'Enviado', 'Recibido' => 'Recibido', 'Total' => 'Total');

	//=======Reporte Usuarios por localidad===========
	$localidad = $this->generarLocalidades(1);		
	
	//=======Reporte Usuarios por genero===========
	$genero = $this->generarGeneros();

	//=======Reporte Usuarios por edad===========
	$edad = $this->generarEdades(1);

	return $this->render('reporteriaBundle:Reporteria:resultado.html.twig', array(
				'titulo' => $general[0], 'respuestas' => $general[1], 'valores' => $general[2],
				'datosE' => $encuestas[0], 'valoresE' => $encuestas[1], 'tituloE' => $encuestas[2], 'encuestasE' => $encuestas[3], 'recibidosE' => $encuestas[4],
				'tituloH' => $historial[0],'operacionesH' => $historial[1],
				
				'tituloD' => 'Denuncias recibidas', 'denuncias' => $this->getDoctrine()->getRepository('modeloBundle:ScdDenuncia')->getDenunciasPorEntidad(), 'tituloUser' => $tituloUser,
				
				'masActivo' => $users, 'dato' => $edad,
				'valoresL' => $localidad[0], 'tituloL' => $localidad[1], 'localidadesL' => $localidad[2],
				'tituloG' => $genero[0], 'generoG' => $genero[1], 'valoresG' => $genero[2],
				'tituloA' => $edad[0],'edadesA' => $edad[0],'valoresA' => $edad[0], )); 
 }
 private function generarGeneral() {
	$titulo = 'Trafico General';
	$dato = 'Enviados';
	$respuestas[] = $dato;
	$valores[$dato] = count($this->getDoctrine()->getRepository('modeloBundle:Sentitems')->findAll());
	$dato = 'Recibidos';
	$respuestas[] = $dato;
	$valores[$dato] = count($this->getDoctrine()->getRepository('modeloBundle:Inbox')->findAll());
	$dato = 'Otros';
	$respuestas[] = $dato;
	$valores[$dato] = count($this->getDoctrine()->getRepository('modeloBundle:ScdOtrosSms')->findAll());
	$gen[] = $titulo;
	$gen[] = $respuestas;
	$gen[] = $valores;
	return $gen;
 }
 private function generarEncuestas() {
	$tituloE = 'Ultimas 5 Encuestas';
	$encuestasE = $this->getDoctrine()->getRepository('modeloBundle:ScdEncuesta')->findAllOrderByDate();	
	$cantidad = count($encuestasE);
	if ($cantidad>5) {
		for ($i=$cantidad; $i > 5; $i--) {
			array_pop($encuestasE);
			$cantidad = count($encuestasE);}}
	$datosE = array();
	$valoresE = array();
	$recibidosE = array();
	foreach ($encuestasE as $encuesta){
		$otras = 0;
		$pos = 0;
		$cantidadRespuestasE = array();
		$porcentajesE = array();
		$respuestasE = array();
		$mensajesE = array();
		$respuestasE = explode(',', strtoupper($encuesta->getRespuestasencuesta()));
		$mensajesE = $this->getDoctrine()->getEntityManager()
				->getRepository('modeloBundle:ScdRecibido')->mensajesEncuesta($encuesta);
		$total = count($mensajesE);
		$recibidosE[$encuesta->getId()] = $total;
		if ($total == 0) {
			$posicion = 0;
			foreach ($respuestasE as $respuesta){
				if (!array_key_exists($posicion, $cantidadRespuestasE))
					array_push($cantidadRespuestasE, 0);
				$cantidadRespuestasE[$posicion] = 0;
				$posicion++; } }
		foreach ($mensajesE as $mensaje) {
			$texto = trim(strstr(strtoupper($mensaje->getMensajerecibido()), " "));
			$posicion = 0;
			$encontrada = false;
			foreach ($respuestasE as $respuesta){
				$respuesta = trim($respuesta);
				if (!array_key_exists($posicion, $cantidadRespuestasE))
					array_push($cantidadRespuestasE, 0);
				if ($texto == $respuesta) {
					$cantidadRespuestasE[$posicion] += 1;
					$encontrada = true; }
				$posicion += 1;		}
			if ($encontrada == false){
				$otras += 1; } }
		$valoresE[$encuesta->getId()] = $cantidadRespuestasE;
		$datosE[$encuesta->getId()] = $respuestasE;	}
	$enc[] = $datosE;
	$enc[] = $valoresE;
	$enc[] = $tituloE;
	$enc[] = $encuestasE;
	$enc[] = $recibidosE;
	return $enc;
 }
 private function generarHistorial() {
	$tituloH = 'Ultimas operaciones';
	$datosH = $this->getDoctrine()->getRepository('modeloBundle:ScdHistorialOperacion')->findAllOrderByDate();		
	$cantidad = count($datosH);
	if ($cantidad>10) {
		for ($i=$cantidad; $i > 10; $i--) {
			array_pop($datosH);
			$cantidad = count($datosH); }}
	$hist[] = $tituloH;
	$hist[] = $datosH;
	return $hist;
 }
 public function generarDenuncias($users) {
	$todas = $this->getDoctrine()->getRepository('modeloBundle:ScdUsuario')->masEnviado();
	$nodos = array();
	foreach ($users as $dato){
	 foreach ($todas as $valor){
	  if ($dato->getUsername() == $valor->getUsername()) {$nodos[$dato->getUsername()] = $valor->getTelefonousuario();}
	  if ($nodos[$dato->getUsername()] == 0) {$nodos[$dato->getUsername()] = $dato->getTelefonousuario();}
	 }
	}
	return $nodos;
 }
 private function generarLocalidades($mayores) {
	$topL = $mayores;	
	$tituloL = 'Usuarios por localidad';
	$localidadesIni =  $this->getDoctrine()->getRepository('modeloBundle:ScdLocalidad')->findAll();
	foreach ($localidadesIni as $localidad) {
		$datoL = $localidad->getId();
		$valoresL[$datoL] = count($this->getDoctrine()->getRepository('modeloBundle:ScdUsuario')->findByLocalidad($datoL));	
		if ($valoresL[$datoL] == 0) 
			unset($valoresL[$datoL]);
		else
			$localidadesL[] = $localidad; }
	$cantidadL = count($localidadesL);
	if ($cantidadL>5) {
		if ($topL == 0)
			asort($valoresL);
		else
			arsort($valoresL);
		for ($i=$cantidadL; $i > 5; $i--) 
				array_pop($valoresL);
		foreach ($localidadesL as $localidad) {
			if (isset($valoresL[$localidad->getId()]))	
			$localidadesSelL[] = $localidad;} }
	else
		$localidadesSelL = $localidadesL;
	$loc[] = $valoresL;
	$loc[] = $tituloL;
	$loc[] = $localidadesSelL;
	return $loc;
 }
 private function generarGeneros() {
	$tituloG = 'Usuarios por gÃ©nero';
	$datoG = 'Femenino';
	$generoG[] = $datoG;
	$valoresG[$datoG] = count($this->getDoctrine()->getRepository('modeloBundle:ScdUsuario')->findBySexousuario('0'));
	$datoG = 'Masculino';
	$generoG[] = $datoG;
	$valoresG[$datoG] = count($this->getDoctrine()->getRepository('modeloBundle:ScdUsuario')->findBySexousuario('1'));
	$gen[] = $tituloG;
	$gen[] = $generoG;
	$gen[] = $valoresG;
	return $gen;
 }
 public function generarEdades($mayores){
	$topA = $mayores;	
	$tituloA = 'Usuarios por edad';
	$edadesA = array();
	$edadesSelA = array();
	$cantidadesA = array();
	$ahora = new \DateTime();	
	$usuarios = $this->getDoctrine()->getRepository('modeloBundle:ScdUsuario')->edades();
	foreach ($usuarios as $user) {
		$edad = $user->getSalt();
		$existe = 0;		   // /calculo de edad
		foreach($edadesA as $e){
			if ($e == $edad)
				$existe +=1; }
		if ($existe == 0)
			$edadesA[] = $edad; }
	foreach ($usuarios as $user) {
		$fechanac = new \DateTime();  //calculo de edad			
		$edad = $ahora->diff($fechanac);
		$edad = (integer)$edad->y;
		foreach($edadesA as $e){
			if ($e == $edad) {
				if (isset($cantidadesA[$e])) 
					$cantidadesA[$e] += 1;
				else
					$cantidadesA[$e] = 1; } } }
	$cantidadA = count($cantidadesA);
	if ($cantidadA > 5) {
		if ($topA == 0)
			asort($cantidadesA);
		else
			arsort($cantidadesA);
	
		for ($i=$cantidadA; $i > 5; $i--){
			array_pop($cantidadesA);}

		foreach ($edadesA as $e) {
			if (isset($cantidadesA[$e]))	
				$edadesSelA[] = $e;} }
	else
		$edadesSelA = $edadesA;
	$ed[] = $tituloA;
	$ed[] = $edadesSelA;
	$ed[] = $cantidadesA;
	return $ed;
 }
 public function generalOdsAction() {
	$tipo = 'vnd.oasis.opendocument.spreadsheet';
	$divisor = ';';
	$archivo = 'general.ods';
	$general = $this->generarGeneral();	
	$data = $general[0]."\n";
	$datos = $general[1];
	$valores = $general[2];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function generalXlsAction() {
	$tipo = 'x-msexcel';
	$divisor = '	';
	$archivo = 'general.xls';
	$general = $this->generarGeneral();	
	$data = $general[0] ."\n";
	$datos = $general[1];
	$valores = $general[2];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function generalXmlAction() {
	$tipo = 'xml';
	$archivo = 'general.xml';
	$general = $this->generarGeneral();	
	$data = "<reporte>\n<titulo>".$general[0]."</titulo>\n";
	$datos = $general[1];
	$valores = $general[2];
	foreach ($datos as $dato) {
		$datoI = "<".$dato.">";
		$cantidad = $valores[$dato]."</".$dato.">\n";
		$data .= $datoI.$cantidad;	}
	$data .= "</reporte>";
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function historialOdsAction() {
	$tipo = 'vnd.oasis.opendocument.spreadsheet';
	$divisor = ';';
	$archivo = 'historial.ods';
	$historial = $this->generarHistorial();	
	$data = $historial[0]."\n";
	$datos = $historial[1];
	foreach ($datos as $dato) {
		$fecha = $dato->getFechahisoperacion()->format('Y/m/d H:i:s');
		$data .= $dato->getDetallehisoperacion().$divisor.$fecha."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function historialXlsAction() {
	$tipo = 'x-msexcel';
	$divisor = '	';
	$archivo = 'historial.xls';
	$historial = $this->generarHistorial();	
	$data = $historial[0]."\n";
	$datos = $historial[1];
	foreach ($datos as $dato) {
		$fecha = $dato->getFechahisoperacion()->format('Y/m/d H:i:s');
		$data .= $dato->getDetallehisoperacion().$divisor.$fecha."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function historialXmlAction() {
	$tipo = 'xml';
	$archivo = 'historial.xml';
	$historial = $this->generarHistorial();	
	$data = "<reporte>\n<titulo>".$historial[0]."</titulo>\n";
	$datos = $historial[1];
	foreach ($datos as $dato) {
		$datoI = "<operacion><descripcion>".$dato->getDetallehisoperacion()."</descripcion>";
		$fecha = "<fecha>".$dato->getFechahisoperacion()->format('Y/m/d H:i:s')."</fecha>";
		$data .= $datoI.$fecha."</operacion>\n";}
	$data .= "</reporte>";
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function denunciasOdsAction() {
	$tipo = 'vnd.oasis.opendocument.spreadsheet';
	$divisor = ';';
	$archivo = 'denuncias.ods';
//	$denuncias = $this->generardenuncias();	
	$data = $denuncias[0] ."\n";
	$datos = $denuncias[1];
	$valores = $denuncias[2];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function denunciasXlsAction() {
	$tipo = 'x-msexcel';
	$divisor = '	';
	$archivo = 'denuncias.xls';
//	$denuncias = $this->generardenuncias();	
	$data = $denuncias[0] ."\n";
	$datos = $denuncias[1];
	$valores = $denuncias[2];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function denunciasXmlAction() {
	$tipo = 'xml';
	$archivo = 'denuncias.xml';
//	$denuncias = $this->generarDenuncias();	
	$data = "<reporte>\n<titulo>".$denuncias[0]."</titulo>\n";
	$datos = $denuncias[1];
	$valores = $denuncias[2];
	foreach ($datos as $dato) {
		$datoI = "<".$dato.">";
		$cantidad = $valores[$dato]."</".$dato.">\n";
		$data .= $datoI.$cantidad;	}
	$data .= "</reporte>";
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function localidadesOdsAction() {
	$tipo = 'vnd.oasis.opendocument.spreadsheet';
	$divisor = ';';
	$archivo = 'localidades.ods';
	$localidades = $this->generarLocalidades(1);	
	$data = $localidades[1] ."\n";
	$datos = $localidades[2];
	$valores = $localidades[0];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato->getId()]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function localidadesXlsAction() {
	$tipo = 'x-msexcel';
	$divisor = '	';
	$archivo = 'localidades.xls';
	$localidades = $this->generarLocalidades(1);	
	$data = $localidades[1] ."\n";
	$datos = $localidades[2];
	$valores = $localidades[0];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato->getId()]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function localidadesXmlAction() {
	$tipo = 'xml';
	$archivo = 'localidades.xml';
	$localidades = $this->generarLocalidades(1);	
	$data = "<reporte>\n<titulo>".$localidades[1]."</titulo>\n";
	$datos = $localidades[2];
	$valores = $localidades[0];
	foreach ($datos as $dato) {
		$datoI = "<localidad>\n<nombre>".$dato."</nombre>\n";
		$cantidad = "<cantidad>".$valores[$dato->getId()]."</cantidad>\n";
		$data .= $datoI.$cantidad."</localidad>\n";}
	$data .= "</reporte>";
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function generoOdsAction() {
	$tipo = 'vnd.oasis.opendocument.spreadsheet';
	$divisor = ';';
	$archivo = 'genero.ods';
	$genero = $this->generarGeneros();	
	$data = $genero[0] ."\n";
	$datos = $genero[1];
	$valores = $genero[2];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function generoXlsAction() {
	$tipo = 'x-msexcel';
	$divisor = '	';
	$archivo = 'genero.xls';
	$genero = $this->generarGeneros();	
	$data = $genero[0] ."\n";
	$datos = $genero[1];
	$valores = $genero[2];
	foreach ($datos as $dato) {
		$data .= $dato.$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function generoXmlAction() {
	$tipo = 'xml';
	$archivo = 'genero.xml';
	$genero = $this->generarGeneroS();	
	$data = "<reporte>\n<titulo>".$genero[0]."</titulo>\n";
	$datos = $genero[1];
	$valores = $genero[2];
	foreach ($datos as $dato) {
		$datoI = "<".$dato.">";
		$cantidad = $valores[$dato]."</".$dato.">\n";
		$data .= $datoI.$cantidad;	}
	$data .= "</reporte>";
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function edadesOdsAction() {
	$tipo = 'vnd.oasis.opendocument.spreadsheet';
	$divisor = ';';
	$archivo = 'edades.ods';
	$edades = $this->generarEdades(1);	
	$data = $edades[0] ."\n";
	$datos = $edades[1];
	$valores = $edades[2];
	foreach ($datos as $dato) {
		$data .= $dato." aÃ±os".$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function edadesXlsAction() {
	$tipo = 'x-msexcel';
	$divisor = '	';
	$archivo = 'edades.xls';
	$edades = $this->generarEdades(1);	
	$data = $edades[0] ."\n";
	$datos = $edades[1];
	$valores = $edades[2];
	foreach ($datos as $dato) {
		$data .= $dato." aÃ±os".$divisor.$valores[$dato]."\n";	}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function edadesXmlAction() {
	$tipo = 'xml';
	$archivo = 'edades.xml';
	$edades = $this->generarEdades(1);	
	$data = "<reporte>\n<titulo>".$edades[0]."</titulo>\n";
	$datos = $edades[1];
	$valores = $edades[2];
	foreach ($datos as $dato) {
		$datoI = "<edad>\n<descripcion>".$dato." aÃ±os</descripcion>\n";
		$cantidad = "<cantidad>".$valores[$dato]."</cantidad>\n";
		$data .= $datoI.$cantidad."</edad>\n";}
	$data .= "</reporte>";
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function encuestasOdsAction() {
	$tipo = 'vnd.oasis.opendocument.spreadsheet';
	$divisor = ';';
	$archivo = 'encuestas.ods';
	$encuestas = $this->generarEncuestas();	
	$data = $encuestas[2]."\n";
	$datos = $encuestas[3];
	$valores = $encuestas[4];
	$datosE = $encuestas[0];
	$valoresE = $encuestas[1];
	foreach ($datos as $dato) {
		$data .= $dato->getMensajeencuesta().$divisor.$valores[$dato->getId()]."\n";	
		foreach($datosE[$dato->getId()] as $k=>$e) {
			$data .= $divisor.$e.$divisor.$valoresE[$dato->getId()][$k]."\n";}}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
  public function encuestasXlsAction() {
	$tipo = 'x-msexcel';
	$divisor = '	';
	$archivo = 'encuestas.xls';
	$encuestas = $this->generarEncuestas();	
	$data = $encuestas[2]."\n";
	$datos = $encuestas[3];
	$valores = $encuestas[4];
	$datosE = $encuestas[0];
	$valoresE = $encuestas[1];
	foreach ($datos as $dato) {
		$data .= $dato->getMensajeencuesta().$divisor.$valores[$dato->getId()]."\n";	
		foreach($datosE[$dato->getId()] as $k=>$e) {
			$data .= $divisor.$e.$divisor.$valoresE[$dato->getId()][$k]."\n";}}
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 public function encuestasXmlAction() {
	$tipo = 'xml';
	$archivo = 'encuestas.xml';
	$encuestas = $this->generarEncuestas();	
	$data = "<reporte>\n<titulo>".$encuestas[2]."</titulo>\n";
	$datos = $encuestas[3];
	$valores = $encuestas[4];
	$datosE = $encuestas[0];
	$valoresE = $encuestas[1];
	foreach ($datos as $dato) {
		$id = $dato->getId();
		$data .= "<encuesta>\n<texto>".$dato->getMensajeencuesta()."</texto>"."\n<total>".$valores[$id]."</total>\n";	
		$data .= "<respuestas>\n";
		foreach($datosE[$id] as $k=>$e) {
			$data .= "<respuesta>\n<texto>".$e."</texto>\n<cantidad>".$valoresE[$id][$k]."</cantidad>\n</respuesta>\n";
		}
		$data .= "</respuestas>\n</encuesta>\n";
	}
	$data .= "</reporte>";
	$this->generarArchivo($data, $archivo, $tipo);
	return new Response(' ');
 }
 private function generarArchivo($data, $archivo, $tipo) {
	$data_to_write = $data;
	$file_name = $archivo; 
	$file_open = fopen($file_name,"w+");
	if($file_open){
	fwrite($file_open, $data_to_write);    
	fclose($file_open);
	header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
	header("Last-Modified: " .gmdate("D,d M YH:i:s") . " GMT");
	header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
	header("Pragma: no-cache");
	header("Content-type: application/".$tipo);
	header("Content-Disposition: attachment; filename=\"" . $file_name . "\"" );
	header("Content-Description: PHP/INTERBASE Generated Data" );
	readfile($file_name);
	unlink($file_name);
 	}
 }
 public function localidadesMapaAction() {
	$loc = $this->generarLocalidades(1);	
	$localidades = $loc[2];
	$valores = $loc[0];
	return $this->render('reporteriaBundle:Reporteria:mapa.html.twig', array('localidades' => $localidades, 'valores' => $valores)); 
	
 }
}
